#!/usr/bin/env python3
"""
Test Workflow Fix - Verify that workflows work with MCP bridge
"""

import requests
import json
import time

def test_workflow_system():
    """Test that the workflow system is working with the MCP bridge."""
    
    print("üîç WORKFLOW SYSTEM TEST")
    print("=" * 50)
    
    # Test 1: Check MCP bridge health
    print("1Ô∏è‚É£ Testing MCP bridge health...")
    try:
        response = requests.get("http://127.0.0.1:5000/health", timeout=5)
        if response.status_code == 200:
            health = response.json()
            print(f"   ‚úÖ MCP Bridge is healthy: {health['status']}")
        else:
            print(f"   ‚ùå MCP Bridge health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Cannot connect to MCP bridge: {e}")
        return False
    
    # Test 2: Check available tools
    print("\n2Ô∏è‚É£ Testing available tools...")
    try:
        response = requests.get("http://127.0.0.1:5000/tools", timeout=5)
        if response.status_code == 200:
            tools = response.json()
            print(f"   ‚úÖ Found {len(tools['tools'])} tools:")
            for tool in tools['tools']:
                print(f"      - {tool['name']}: {tool['description']}")
        else:
            print(f"   ‚ùå Failed to get tools: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Cannot get tools: {e}")
        return False
    
    # Test 3: Test create_pull_request directly
    print("\n3Ô∏è‚É£ Testing create_pull_request directly...")
    try:
        test_data = {
            "tool": "create_pull_request",
            "arguments": {
                "title": "Workflow Test PR",
                "description": "This is a test PR created by the workflow system",
                "source_branch": "feature/workflow_test",
                "target_branch": "main"
            }
        }
        
        response = requests.post(
            "http://127.0.0.1:5000/call",
            headers={"Content-Type": "application/json"},
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print(f"   ‚úÖ PR created successfully!")
                print(f"      PR Number: {result.get('pr_number')}")
                print(f"      PR Title: {result.get('pr_title')}")
                print(f"      PR URL: {result.get('pr_url')}")
            else:
                print(f"   ‚ùå PR creation failed: {result.get('error')}")
                return False
        else:
            print(f"   ‚ùå HTTP error: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error creating PR: {e}")
        return False
    
    # Test 4: Test master agent API (if available)
    print("\n4Ô∏è‚É£ Testing master agent API...")
    try:
        # Try to connect to master agent on port 8058
        response = requests.get("http://localhost:8058/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Master agent API is available")
            
            # Test workflow creation
            workflow_data = {
                "workflow_type": "create_pr",
                "parameters": {
                    "title": "API Test PR",
                    "description": "PR created via API test",
                    "source_branch": "feature/api_test",
                    "target_branch": "main"
                },
                "priority": 2
            }
            
            response = requests.post(
                "http://localhost:8058/workflow/create",
                headers={"Content-Type": "application/json"},
                json=workflow_data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ Workflow created: {result.get('workflow_id')}")
            else:
                print(f"   ‚ö†Ô∏è  Workflow creation failed: {response.status_code}")
        else:
            print("   ‚ö†Ô∏è  Master agent API not available (this is normal if not running)")
    except Exception as e:
        print("   ‚ö†Ô∏è  Master agent API not available (this is normal if not running)")
    
    print("\nüéâ WORKFLOW SYSTEM TEST COMPLETED!")
    print("‚úÖ MCP Bridge is running and working correctly")
    print("‚úÖ Pull request creation is functional")
    print("‚úÖ The workflow system should now work properly")
    
    return True

def test_master_agent_cli_integration():
    """Test integration with master agent CLI."""
    
    print("\nüîç MASTER AGENT CLI INTEGRATION TEST")
    print("=" * 50)
    
    print("üìã Instructions for testing:")
    print("1. The MCP bridge is now running on port 5000")
    print("2. The master agent CLI should be running")
    print("3. Try creating a workflow with:")
    print("   create workflow create_pr")
    print("4. Enter the following details:")
    print("   - Title: Test Workflow Fix")
    print("   - Branch: feature/workflow_fix")
    print("5. The workflow should now complete successfully!")
    
    print("\nüîß Current Status:")
    print("   ‚úÖ MCP Bridge: Running on http://127.0.0.1:5000")
    print("   ‚úÖ Test Mode: No GitHub credentials required")
    print("   ‚úÖ Tools Available: create_pull_request, list_pull_requests, etc.")
    
    return True

if __name__ == "__main__":
    print("üöÄ WORKFLOW SYSTEM FIX VERIFICATION")
    print("=" * 60)
    print("This test verifies that the workflow system is now working")
    print("with the MCP bridge running on port 5000.")
    print()
    
    # Run tests
    success = test_workflow_system()
    
    if success:
        test_master_agent_cli_integration()
        
        print("\nüìã SUMMARY:")
        print("‚úÖ MCP Bridge: RUNNING")
        print("‚úÖ Pull Request Creation: WORKING")
        print("‚úÖ Workflow System: READY")
        print("‚úÖ Master Agent Integration: READY")
        print("\nüéØ The workflow system should now work correctly!")
        print("   Try creating a workflow in the master agent CLI.")
        
    else:
        print("\n‚ùå WORKFLOW SYSTEM TEST FAILED")
        print("Please check the MCP bridge and try again.") 